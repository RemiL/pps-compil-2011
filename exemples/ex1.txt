/**
 * Ceci est un fichier qui teste un grand nombre des différentes constructions permises par le langage
 *
 * Frédéric Voisin + correction d'erreurs résiduelles
 */


class Point(xc: Entier, yc: Entier, n: Chaine := "?")
           { x := xc; y := yc; name := n; 
             iname := Point.newId() /* Point est obligatoire */
           }
is {
  static var number : Entier := 1;
  var x: Entier;     /* les coordonnees sont modifiables */
  var y: Entier;
  var name: Chaine;  /* le nom est modifiable */
  val iname : Entier /* l'index de creation est non modifiable */

  def static newId() returns Entier is {
      val tmp : Entier := number
      is number := number + 1; tmp
  }
  
  def static alloues() returns Entier is { number -1 }

  def setName(s: Chaine) returns Chaine is { name := s }

  def move(dx: Entier, dy: Entier) returns Point is {
      x := x + dx; y := y + dy; this
  }

  def print() returns Point is {
      "Inside Point::print\n".imprimer();
      name.imprimer(); "[".imprimer(); iname.imprimer(); "]".imprimer();
      "= (".imprimer(); x.imprimer();
      ", ".imprimer(); y.imprimer(); ")".imprimer();
      this
  }

  def verboseMove (dx: Entier, dy: Entier) returns Point is {
      this.move(dx, dy); /* le this est obligatoire */
      this.print();
      this
  }

  def getx() returns Entier is { x }

  def gety() returns Entier is { y }

  def clone() returns Point is { new Point(x, y) }

  def egal(p: Point) returns Entier is {
   /* ils sont egaux s'ils ont memes coordonnees */
       var b1 : Entier := p.x - x;
       var b2 : Entier := p.y -y
    is if b1 then 0 else b2 = 0
  }
}

class Couleur(cinit: Entier := 0) 
        /* 3 couleurs seulement : couleur = 0, 1 ou autre chose ! */
      { coul := if cinit <> 0 then if cinit <> 1 then 2 else 1 else 0 } is {
  val coul: Entier /* initialise dans le constructeur */

  def static blanc() returns Couleur is { new Couleur() }

  def static noir() returns Couleur is { new Couleur(1) }

  def static gris() returns Couleur is { new Couleur(2) }

  def couleur() returns Chaine is {
      "Inside Couleur::couleur\n".imprimer();
      if coul = 0 then "Blanc"
      else if coul = 1 then "Noir" 
      else "Gris"
      }

  def estGris() returns Entier is {
  "Inside Couleur::estGris\n".imprimer();
  coul = 2
  }

}

class PointColore(xc: Entier, yc:Entier, c: Couleur:= Couleur.blanc())
      extends Point(xc, yc) { coul := c } is {
      
  val coul: Couleur

  def couleur() returns Couleur is { coul }

  def colore() returns Entier is { coul.estGris() <> 0 }

  def override clone() returns Point /* pas PointColore ! */ is {
      new PointColore(x, y, coul)
      }

  def estGris() returns Entier is {
      "Inside PointColore::estGris\n".imprimer();
      coul.estGris()
      }

  def override print() returns Point is {
      "Inside PointColore::print\n".imprimer();
      super.print(); this.couleur().couleur().imprimer(); "\n".imprimer();
      this
      }
}

class PointNoir(xc: Entier, yc:Entier)
      extends PointColore(xc, yc, Couleur.noir())
      /* pas d'instruction d'initialisation pour cette classe */
  is {
  def override estGris() returns Entier is { 0 }
  def override couleur() returns Couleur is { Couleur.noir() }
}

class DefaultPoint()
      extends PointColore(0, 0) /* utilise la couleur par defaut */
      /* pas d'instruction d'initialisation pour cette classe */
  is {
  def override estGris() returns Entier is { 0 }
  def override couleur() returns Couleur is {  Couleur.blanc() }
}

class Test() is {
  def static test(p: Point, p2: PointColore, p3: PointNoir) returns Entier is {
      var c: Chaine; var c2: Chaine; var c3: Chaine
      is
      p.print(); "\n".imprimer();
      p2.print(); "\n".imprimer();
      "Appel 1: \n".imprimer();
      c := if p2.colore() <> 0 then "colore" else "gris";
      "Appel 2: \n".imprimer();
      c2 := if p3.colore() <> 0 then "colore" else "gris";
      "Appel 3: \n".imprimer();
      c3 := if p3.colore() <> 0 then "colore" else "gris";
      "Resultats de test: ".imprimer();
      c.imprimer(); " ".imprimer();
      c2.imprimer(); " ".imprimer();
      c3.imprimer(); "\n".imprimer();
      0  
      } 
  def static test2(p: PointColore) returns Entier is { 
      p.couleur().couleur().imprimer(); 
      1 
      }
}
/* Bloc qui correspond au programme principal */ 
{ 
  var p1: Point := new Point(1, 5);
  var p2: Point := new Point(2, 3);
  var o : PointColore := new PointColore(0, 0);
  var pn : PointNoir := new PointNoir(+1, -1);
  var dp : DefaultPoint := new DefaultPoint()
is
  p2.move(p1.getx(), p1.gety());
  o.setName("origine");
  p2.move(p1.getx()-2*5-3, p1.gety());
  o.print();
  p2.print();
  o.clone().print();
  o.clone().move(54, 36).print();
  /* la ligne ci-dessous ne compile pas car clone() renvoie statiquement un Point */
  /* o := o.clone(); */
  p1 := p1.clone().move(+2, -3); p1.print();
  o.clone().print();
  "test(Point, PointColore, PointNoir)\n".imprimer();
  Test.test(p1, o, pn);
  "test(PointNoir, PointNoir, PointNoir)\n".imprimer();
  Test.test(pn, pn, pn);
  p1 := pn;
  Test.test2(o);
  Test.test2(pn);
  o := pn;

  "test(PointNoir, PointNoir, PointNoir)\n".imprimer();
  Test.test(p1, o, pn);
  Test.test2(o);
  Test.test2(pn)
}
